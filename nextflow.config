docker.enabled = true

params {
  panel_path = "s3://lifebit-featured-datasets/modules/beagle5/ref"
  fasta_path = "s3://lifebit-featured-datasets/modules/beagle5/hs37d5.fa.gz"
  genotypes_path = "s3://lifebit-featured-datasets/modules/genotypes"
  chromosome_regions = "s3://lifebit-featured-datasets/modules/beagle5/hs37d5.txt"
  regex = ~/chr(.*).1kg.phase3.v5a.b37.bref3/
}

process {
  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  withName:beagle {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }

}
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
